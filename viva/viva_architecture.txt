================================================================================
                                VIVA 면접 플랫폼 아키텍처
================================================================================

📋 프로젝트 개요
- 프로젝트명: Viva (면접 플랫폼)
- 기술 스택: Spring Boot 3.3.13, Java 17, MySQL/H2, Thymeleaf
- 주요 기능: AI 채팅, 음성 면접, 면접 예약, 자소서 관리

================================================================================
🏗️ 전체 아키텍처 개요
================================================================================

┌─────────────────────────────────────────────────────────────────┐
│                        Viva 면접 플랫폼                        │
├─────────────────────────────────────────────────────────────────┤
│  Frontend (Thymeleaf)  │  Backend (Spring Boot)  │  Database  │
│  ┌─────────────────┐   │  ┌─────────────────┐    │  ┌──────┐  │
│  │ • HTML/CSS/JS  │   │  │ • Controllers   │    │  │MySQL │  │
│  │ • Thymeleaf    │   │  │ • Services      │    │  │H2    │  │
│  │ • Bootstrap    │   │  │ • Repositories  │    │  └──────┘  │
│  └─────────────────┘   │  │ • Security      │    │           │
│                        │  │ • AI Integration│    │           │
│                        │  └─────────────────┘    │           │
└─────────────────────────────────────────────────────────────────┘

================================================================================
📋 기술 스택 상세
================================================================================

Backend:
- Spring Boot 3.3.13 (Java 17)
- Spring Security (인증/인가)
- Spring Data JPA (데이터 접근)
- Spring OAuth2 (소셜 로그인 - 카카오)
- Thymeleaf (템플릿 엔진)
- Lombok (보일러플레이트 코드 제거)

Database:
- MySQL (운영 환경)
- H2 (개발/테스트 환경)

AI Integration:
- OpenAI GPT API (AI 채팅)
- Whisper API (음성 인식)

Build Tool:
- Gradle
- Java Compiler 설정: -parameters (Spring 파라미터 이름 해결)

================================================================================
🏛️ 레이어드 아키텍처
================================================================================

┌─────────────────────────────────────────────────────────────┐
│                    Presentation Layer                      │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐        │
│  │UserController│ │AIController │ │PaymentCtrl  │        │
│  │MainController│ │JasoController│ │ReservationCtrl│      │
│  │InterviewerCtrl│ │AiVoiceCtrl │ │AdminController│       │
│  └─────────────┘ └─────────────┘ └─────────────┘        │
├─────────────────────────────────────────────────────────────┤
│                     Business Layer                         │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐        │
│  │UserService  │ │AIService    │ │JasoService  │        │
│  │InterviewerS │ │AiVoiceService│ │PaymentService│       │
│  │ReservationS │ │AiSessionS   │ │AiMessageS   │        │
│  └─────────────┘ └─────────────┘ └─────────────┘        │
├─────────────────────────────────────────────────────────────┤
│                    Data Access Layer                       │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐        │
│  │UsersRepo    │ │JasoRepo     │ │PaymentRepo  │        │
│  │InterviewerRepo│ │AiSessionRepo│ │ReservationRepo│      │
│  │AiMessageRepo│ │AiVoiceRepo  │ │ReviewRepo   │        │
│  └─────────────┘ └─────────────┘ └─────────────┘        │
├─────────────────────────────────────────────────────────────┤
│                      Database Layer                        │
│                    MySQL / H2 Database                     │
└─────────────────────────────────────────────────────────────┘

================================================================================
🔐 보안 아키텍처
================================================================================

┌─────────────────────────────────────────────────────────────┐
│                    Security Layer                          │
│  ┌─────────────────────────────────────────────────────┐   │
│  │              SecurityConfig                         │   │
│  │  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ │   │
│  │  │Form Login   │ │OAuth2 Login │ │Custom Auth  │ │   │
│  │  │(ID/PW)      │ │(Kakao)      │ │Handler      │ │   │
│  │  └─────────────┘ └─────────────┘ └─────────────┘ │   │
│  └─────────────────────────────────────────────────────┘   │
├─────────────────────────────────────────────────────────────┤
│                    Authentication                          │
│  ┌─────────────┐ ┌─────────────┐ ┌─────────────┐        │
│  │CustomUser   │ │OAuth2User   │ │Role-based   │        │
│  │Details      │ │(Kakao)      │ │Access Control│        │
│  └─────────────┘ └─────────────┘ └─────────────┘        │
└─────────────────────────────────────────────────────────────┘

보안 구성 요소:
- CustomUserDetailsService: 사용자 인증 서비스
- CustomAuthenticationFailureHandler: 로그인 실패 처리
- CustomUserDetails: 사용자 상세 정보
- PasswordEncoder: 비밀번호 암호화 (현재 NoOp, 운영시 BCrypt 권장)

================================================================================
🎯 주요 기능별 아키텍처
================================================================================

1. AI 채팅 시스템
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Frontend  │───▶│AIController │───▶│  AIService  │
│ (Thymeleaf) │    │             │    │             │
└─────────────┘    └─────────────┘    └─────────────┘
                           │                   │
                           ▼                   ▼
                   ┌─────────────┐    ┌─────────────┐
                   │AiSessionRepo│    │ OpenAI API  │
                   │AiMessageRepo│    │   (GPT)     │
                   └─────────────┘    └─────────────┘

2. 음성 면접 시스템
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Frontend  │───▶│AiVoiceCtrl  │───▶│AiVoiceService│
│ (Voice UI)  │    │             │    │             │
└─────────────┘    └─────────────┘    └─────────────┘
                           │                   │
                           ▼                   ▼
                   ┌─────────────┐    ┌─────────────┐
                   │AiVoiceRepo  │    │ Whisper API │
                   │             │    │   (STT)     │
                   └─────────────┘    └─────────────┘

3. 예약 시스템
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Frontend  │───▶│Reservation  │───▶│Reservation  │
│ (Calendar)  │    │Controller    │    │Service      │
└─────────────┘    └─────────────┘    └─────────────┘
                           │                   │
                           ▼                   ▼
                   ┌─────────────┐    ┌─────────────┐
                   │Reservation  │    │ Payment     │
                   │Repository   │    │ Integration │
                   └─────────────┘    └─────────────┘

4. 자소서 관리 시스템
┌─────────────┐    ┌─────────────┐    ┌─────────────┐
│   Frontend  │───▶│JasoController│───▶│ JasoService │
│ (Thymeleaf) │    │             │    │             │
└─────────────┘    └─────────────┘    └─────────────┘
                           │                   │
                           ▼                   ▼
                   ┌─────────────┐    ┌─────────────┐
                   │JasoRepo     │    │ AI 피드백   │
                   │JasoFeedback │    │ (GPT)       │
                   └─────────────┘    └─────────────┘

================================================================================
📊 데이터 모델 관계
================================================================================

Users (사용자)
├── mem (취준생)
│   ├── Jaso (자소서)
│   │   └── JasoFeedback (자소서 피드백)
│   ├── Reservation (예약)
│   ├── AiSession (AI 채팅 세션)
│   │   ├── AiMessage (AI 메시지)
│   │   └── AiFeedback (AI 피드백)
│   └── AiVoice (음성 면접)
└── intr (면접관)
    ├── Interviewer (면접관 정보)
    ├── Review (리뷰)
    └── Reservation (예약 관리)

Payment (결제)
├── Reservation (예약과 연결)
└── Interviewer (면접관과 연결)

엔티티 상세:
- Users: 사용자 기본 정보 (mem/intr 역할 구분)
- Interviewer: 면접관 상세 정보
- Jaso: 자소서 내용
- Reservation: 예약 정보
- Payment: 결제 정보
- AiSession: AI 채팅 세션
- AiMessage: AI 대화 메시지
- AiVoice: 음성 면접 데이터
- Review: 면접관 리뷰

================================================================================
🔄 요청 처리 플로우
================================================================================

1. 클라이언트 요청 (브라우저)
   ↓
2. Spring Security (인증/인가 체크)
   ↓
3. Controller (요청 매핑 및 처리)
   ↓
4. Service (비즈니스 로직 처리)
   ↓
5. Repository (데이터 접근 계층)
   ↓
6. Database (데이터 저장/조회)
   ↓
7. Service (결과 처리)
   ↓
8. Controller (응답 생성)
   ↓
9. Thymeleaf (뷰 렌더링)
   ↓
10. 클라이언트 응답 (HTML)

================================================================================
📁 프론트엔드 구조
================================================================================

templates/
├── main.html (메인 페이지)
├── fragments/
│   ├── header.html
│   └── footer.html
├── member/ (회원 관련)
│   ├── loginmain.html (로그인 페이지)
│   ├── memberform.html (회원가입 폼)
│   ├── loginSuccess.html (로그인 성공)
│   ├── memberEdit.html (회원정보 수정)
│   └── signupselect.html (회원가입 선택)
├── mypage/ (마이페이지)
│   ├── memMypage.html (취준생 마이페이지)
│   ├── intrMypage.html (면접관 마이페이지)
│   ├── jasolist.html (자소서 목록)
│   ├── jasoview.html (자소서 보기)
│   ├── jasowrite.html (자소서 작성)
│   ├── memReservation.html (예약 관리)
│   └── jobsite.html (취업사이트)
├── Ai/ (AI 기능)
│   ├── aichat.html (AI 채팅)
│   ├── aivoice.html (AI 음성)
│   ├── voice-conversation.html (음성 대화)
│   └── voice-conversations.html (음성 대화 목록)
├── interviewer/ (면접관)
│   ├── List.html (면접관 목록)
│   ├── detail.html (면접관 상세)
│   └── form.html (면접관 등록)
├── payment/ (결제)
│   ├── charge.html (결제 페이지)
│   ├── result.html (결제 결과)
│   ├── test.html (테스트)
│   └── testlist.html (테스트 목록)
└── Reservation.html (예약 페이지)

static/
├── css/
│   ├── main.css
│   ├── chat.css
│   ├── common.css
│   ├── int.css
│   └── interviewer.css
├── js/
│   └── check.js
└── images/
    ├── default_profile.jpg
    ├── kakao_login_medium_wide.png
    └── test_profile.jpg

================================================================================
🎮 주요 API 엔드포인트
================================================================================

인증 관련:
- GET /loginmain - 로그인 페이지
- POST /loginAll - 로그인 처리
- GET /memberform - 회원가입 폼
- POST /memberinsert - 회원가입 처리
- GET /main - 메인 페이지
- GET /mypage - 마이페이지

AI 관련:
- GET /ai/aichat - AI 채팅 페이지
- POST /ai/send - AI 메시지 전송
- POST /ai/sendAndReply - AI 응답 생성
- GET /ai/messages/{sessionId} - 메시지 조회
- GET /ai/sessions - 세션 목록
- DELETE /ai/session/delete - 세션 삭제

음성 관련:
- POST /ai/voice/transcribe - 음성 텍스트 변환
- POST /ai/voice/save - 음성 피드백 저장
- GET /ai/voice/history - 음성 히스토리
- POST /ai/voice/interview - 음성 면접 처리

자소서 관련:
- GET /mypage/jaso/list - 자소서 목록
- GET /mypage/jaso/write - 자소서 작성
- POST /mypage/jaso/save - 자소서 저장
- GET /mypage/jaso/view/{id} - 자소서 보기

면접관 관련:
- GET /interviewer - 면접관 목록
- GET /interviewer/form - 면접관 등록
- POST /interviewer/save - 면접관 저장
- GET /interviewer/{id} - 면접관 상세

예약 관련:
- GET /api/reservations/{id}/availability - 가능 시간 조회
- POST /api/reservations/{id}/reservations - 예약 생성

결제 관련:
- GET /payment/charge - 결제 페이지
- POST /payment/save - 결제 처리
- GET /payment/result - 결제 결과

================================================================================
🔧 설정 파일
================================================================================

build.gradle 주요 의존성:
- spring-boot-starter-web
- spring-boot-starter-security
- spring-boot-starter-oauth2-client
- spring-boot-starter-data-jpa
- spring-boot-starter-thymeleaf
- mysql-connector-j
- lombok

application.properties:
- spring.application.name=viva
- spring.profiles.include=secret
- spring.config.import=optional:classpath:application-secret.properties

================================================================================
🚀 배포 및 운영
================================================================================

개발 환경:
- Java 17
- Gradle
- H2 Database (개발용)
- Spring Boot DevTools

운영 환경:
- Java 17
- MySQL Database
- Spring Boot 3.3.13
- OAuth2 (카카오 로그인)

보안 고려사항:
- CSRF 보호 (개발환경에서 비활성화)
- PasswordEncoder (운영시 BCrypt 사용 권장)
- OAuth2 소셜 로그인
- Role-based 접근 제어

================================================================================
📈 확장 가능성
================================================================================

향후 추가 가능한 기능:
1. 실시간 채팅 (WebSocket)
2. 화상 면접 (WebRTC)
3. AI 면접 질문 생성
4. 면접 결과 분석
5. 취업 추천 시스템
6. 모바일 앱 (React Native/Flutter)
7. 마이크로서비스 아키텍처 전환

기술적 확장:
1. Redis 캐싱
2. Elasticsearch 검색
3. AWS S3 파일 저장
4. Docker 컨테이너화
5. Kubernetes 오케스트레이션

================================================================================
🎯 아키텍처 장점
================================================================================

1. 표준 Spring Boot 아키텍처
   - 검증된 패턴 사용
   - 유지보수성 높음
   - 확장성 좋음

2. 레이어 분리
   - 관심사 분리
   - 테스트 용이성
   - 코드 재사용성

3. 보안 강화
   - Spring Security 활용
   - OAuth2 소셜 로그인
   - Role-based 접근 제어

4. AI 통합
   - OpenAI API 연동
   - 음성 인식 기능
   - 확장 가능한 AI 기능

5. 사용자 친화적
   - Thymeleaf 템플릿
   - 반응형 디자인
   - 직관적인 UI/UX

================================================================================
🔍 모니터링 및 로깅
================================================================================

로깅:
- Spring Boot 기본 로깅
- 개발환경에서 상세 로그
- 운영환경에서 에러 로그 집중

모니터링:
- 애플리케이션 상태 확인
- 데이터베이스 연결 상태
- AI API 응답 시간
- 사용자 활동 추적

================================================================================
📝 개발 가이드라인
================================================================================

코딩 컨벤션:
- Java 17 문법 활용
- Lombok 사용으로 보일러플레이트 제거
- Spring Boot 베스트 프랙티스 준수
- RESTful API 설계 원칙

테스트:
- JUnit 5 사용
- Spring Boot Test 활용
- 통합 테스트 및 단위 테스트

문서화:
- JavaDoc 주석
- README.md 유지보수
- API 문서화

================================================================================
🎉 결론
================================================================================

Viva 프로젝트는 Spring Boot 기반의 현대적인 웹 애플리케이션으로,
면접 플랫폼이라는 특화된 도메인에 AI 기술을 접목한 혁신적인 서비스입니다.

주요 특징:
✅ 표준 Spring Boot 아키텍처
✅ AI 기능 통합 (GPT, Whisper)
✅ 보안 강화 (Spring Security, OAuth2)
✅ 사용자 친화적 UI/UX
✅ 확장 가능한 구조
✅ 유지보수성 높은 코드

이 아키텍처를 통해 안정적이고 확장 가능한 면접 플랫폼을 구축할 수 있습니다.

================================================================================ 