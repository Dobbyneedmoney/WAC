package com.example.demo.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.model.dto.InterviewRoomDTO;
import com.example.demo.model.dto.TextRoomDTO;
import com.example.demo.model.entity.InterviewRoom;
import com.example.demo.model.entity.Reservation;
import com.example.demo.model.entity.TextRoom;
import com.example.demo.model.entity.Users;
import com.example.demo.repository.InterviewRoomRepository;
import com.example.demo.repository.ReservationRepository;
import com.example.demo.repository.TextRoomRepository;
import com.example.demo.repository.UsersRepository;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class InterviewRoomService {

	@Autowired
	private final UsersRepository usersRepo; 
	
	@Autowired
	private final InterviewRoomRepository intrRoomRepo;
	
	@Autowired
	private final TextRoomRepository textRoomRepo;
	
	@Autowired
	private final ReservationRepository reservationRepo;
	
	// Î∞© Ï†ÑÏ≤¥ Ï°∞Ìöå
	public List<InterviewRoomDTO> getAllRooms() {
        return intrRoomRepo.findAllByOrderByIntrRoomIdDesc()
        		.stream()										// Î™®Îì† Ïù∏ÌÑ∞Î∑∞ Î∞© Î™©Î°ù  Í∞ÄÏ†∏Ïò¥
                .map(this::interviewRoomConvertToDTO)			// Í∞Å ÏóîÌã∞Ìã∞ DTO Î≥ÄÌôò
                .collect(Collectors.toList());					// Îã§Ïãú Î¶¨Ïä§Ìä∏ ÌòïÌÉúÎ°ú Î≥ÄÌôò
    }

	// ÏòàÏïΩÎ≤àÌò∏Î°ú Î∞©Í≤ÄÏÉâ
	public InterviewRoomDTO getRoomByResId(Integer resId) {
	    InterviewRoom entity = intrRoomRepo.findByReservation_ResId(resId)
	        .orElseThrow(() -> new IllegalArgumentException("Ìï¥Îãπ ÏòàÏïΩ(resId)Ïóê Î∞©Ïù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§."));
	    return interviewRoomConvertToDTO(entity);
	}
	
	// Î∞© ÏÉùÏÑ± Ï§ëÎ≥µ Í≤ÄÏÇ¨
	@Transactional
	public InterviewRoomDTO createRoomSafely(InterviewRoomDTO dto) {
	    if (dto.getResId() != null) {
	        Reservation reservation = reservationRepo.findById(dto.getResId())
	            .orElseThrow(() -> new IllegalStateException("Ìï¥Îãπ ÏòàÏïΩ(resId)ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§."));

	        if (intrRoomRepo.existsByReservation(reservation)) {
	            throw new IllegalStateException("Ïù¥ÎØ∏ ÏÉùÏÑ±Îêú Î∞©Ïù¥ ÏûàÏäµÎãàÎã§.");
	        }
	    }

	    return createRoomWithText(dto);  // Í∏∞Ï°¥ ÏÉùÏÑ± Î°úÏßÅ Ïû¨ÏÇ¨Ïö©
	}
	
	// Î∞©ÏÉùÏÑ±
	@Transactional
	public InterviewRoomDTO createRoomWithText(InterviewRoomDTO dto) {
		System.out.println("HostID : " + dto.getHostId());
		
	    Users host = usersRepo.findById(dto.getHostId())
	        .orElseThrow(() -> new IllegalArgumentException("ÏÇ¨Ïö©Ïûê ÏóÜÏùå"));

	    Reservation reservation = null;
	    if (dto.getResId() != null) {
	        reservation = reservationRepo.findById(dto.getResId())
	            .orElseThrow(() -> new IllegalArgumentException("ÏòàÏïΩ ÏóÜÏùå"));
	    }
	    
	    InterviewRoom room = InterviewRoom.builder()
	        .intrRoomTitle(dto.getIntrRoomTitle())
	        .host(host)
	        .statusCd(dto.getStatusCd())
	        .roomPw(dto.getRoomPw())
	        .startedDt(dto.getStartedDt())
	        .participantCount(dto.getParticipantCount())
	        .reservation(reservation) 
	        .build();

	    InterviewRoom savedRoom = intrRoomRepo.save(room);
	    System.out.println("üî® Î∞© ÏÉùÏÑ± ÏÑ±Í≥µ: " + savedRoom.getIntrRoomId());
	    TextRoom textRoom = TextRoom.builder()
	        .intrRoomId(savedRoom)
	        .host(host)
	        .textRoomTitle(savedRoom.getIntrRoomTitle() + " - Ï±ÑÌåÖÎ∞©")
	        .statusCd("active")
	        .build();

	    textRoomRepo.save(textRoom);
	    System.out.println("üí¨ Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± ÏãúÎèÑ...");

	    return interviewRoomConvertToDTO(savedRoom);
	}
	
	// Î∞© Ï∞∏Í∞Ä
	@Transactional
	public void increaseCurrentParticipantCount(Integer roomId) {
	    InterviewRoom room = intrRoomRepo.findById(roomId)
	        .orElseThrow(() -> new IllegalArgumentException("Î∞© ÏóÜÏùå"));
	    int now = (room.getCurrentParticipantCount() != null) ? room.getCurrentParticipantCount() : 0;
	    room.setCurrentParticipantCount(now + 1);
	    intrRoomRepo.save(room);
	}

	// Î∞© Ìá¥Ïû•
	@Transactional
	public void decreaseCurrentParticipantCount(Integer roomId) {
	    InterviewRoom room = intrRoomRepo.findById(roomId)
	        .orElseThrow(() -> new IllegalArgumentException("Î∞© ÏóÜÏùå"));
	    int now = (room.getCurrentParticipantCount() != null) ? room.getCurrentParticipantCount() : 0;
	    room.setCurrentParticipantCount(Math.max(0, now - 1));
	    intrRoomRepo.save(room);
	}
	
	
	
	// entityÍ∞ùÏ≤¥ -> DTO Í∞ùÏ≤¥Î°ú Î≥ÄÌôò Ìï®Ïàò
    // interviewRoom
	private InterviewRoomDTO interviewRoomConvertToDTO(InterviewRoom entity) {
	    return InterviewRoomDTO.builder()
	            .intrRoomId(entity.getIntrRoomId())
	            .intrRoomTitle(entity.getIntrRoomTitle())
	            .hostId(entity.getHost().getUserId())
	            .createdDt(entity.getCreatedDt())
	            .startedDt(entity.getStartedDt())
	            .endedDt(entity.getEndedDt())
	            .statusCd(entity.getStatusCd())
	            .roomPw(entity.getRoomPw())                        
	            .participantCount(entity.getParticipantCount())
	            .currentParticipantCount(entity.getCurrentParticipantCount()) 
	            .resId(entity.getReservation() != null ? entity.getReservation().getResId() : null)
	            .build();
	}
	
	// textRoom
	public TextRoomDTO textRoomConvertToDto(TextRoom entity) {
	    return TextRoomDTO.builder()
	        .textRoomId(entity.getTextRoomId())
	        .intrRoomId(entity.getIntrRoomId().getIntrRoomId())   // FKÏóêÏÑú ID Í∫ºÎÉÑ
	        .hostId(entity.getHost().getUserId())                 // Users Í∞ùÏ≤¥ÏóêÏÑú ID Í∫ºÎÉÑ
	        .textRoomTitle(entity.getTextRoomTitle())
	        .createdDt(entity.getCreatedDt())
	        .statusCd(entity.getStatusCd())
	        .build();
	}
}
